=== test_gc_closure
--- main.n
import net.udp
import co
import runtime
import time

fn server():void! {
    var buf = vec_new<u8>(0, 1024)
    for int i = 0; i < 100; i += 1 {
        var socket = udp.bind('0.0.0.0:8088')
        for int i = 0; i < 1000; i += 1 {
            socket.sendto('hello' as [u8], '127.0.0.1:8088')
        }
        socket.close()
    }
}

fn main() {
    server()
    co.sleep(1000)
}

=== test_basic
--- main.n
import net.udp
import co
import runtime
import time

var count = 0

fn echo_server():void! {
    var buf = vec_new<u8>(0, 1024)
    var socket = udp.bind('0.0.0.0:8088')
    for true {
        var (len, addr) = socket.recvfrom(buf)
        socket.sendto(buf[0..len], addr.to_string())
    }

    socket.close()
}

fn send():void! {
    var conn = udp.connect('127.0.0.1:8088')
    conn.write('hello world!!' as [u8])
    var buf = vec_new<u8>(0, 1024)

    var len = conn.read(buf)
    println('send success, recv msg', buf[0..len] as string)
    conn.close()
}

fn main() {
    go echo_server()
    co.sleep(500) // wait server start

    var start = time.now().ms_timestamp()
    for int i = 0; i < 100; i += 1 {
        send()
    }
    var end = time.now().ms_timestamp()
    assert(end - start < 5000)
}

--- output.txt
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!
send success, recv msg hello world!!


=== test_closed_panic
--- main.n
import net.udp
import co
import runtime
import time

var count = 0

fn echo_server():void! {
    var buf = vec_new<u8>(0, 1024)
    var socket = udp.bind('0.0.0.0:8088')
    for true {
        var (len, addr) = socket.recvfrom(buf)
        socket.sendto(buf.slice(0, len), addr.to_string())
    }

    socket.close()
}

fn send():void! {
    var conn = udp.connect('127.0.0.1:8088')
    conn.write('hello world!!' as [u8])
    var buf = vec_new<u8>(0, 1024)

    var len = conn.read(buf)
    println('send success, recv msg', buf.slice(0, len) as string)
    conn.close()

    conn.read(buf) catch e {
        panic(e.msg())
        0
    }
}

fn main() {
    go echo_server()
    co.sleep(500) // wait server start

    var start = time.now().ms_timestamp()
    for int i = 0; i < 100; i += 1 {
        send()
    }
    var end = time.now().ms_timestamp()
    assert(end - start < 5000)
}

--- output.txt
send success, recv msg hello world!!
coroutine 'main' panic: 'socket closed' at nature-test/main.n:29:15

=== test_dns
--- main.n
import co
import runtime
import net.dns


fn main() {
    var ips = dns.lookup('www.baidu.com')
    for ip in ips {
        println(ip)
        assert(ip.len() > 10)
    }
}

=== test_dns_failed
--- main.n
import co
import runtime
import net.dns

fn main() {
    var ips = dns.lookup('www.notfoundanything.com') catch e {
        panic(e.msg())
        []
    }
    for ip in ips {
        println(ip)
        assert(ip.len() > 10)
    }
}

--- output.txt
coroutine 'main' panic: 'unknown node or service' at nature-test/main.n:7:15

=== test_sendto_speed
--- main.n
import net.udp
import co
import runtime
import time

var count = 0

fn main() {
    var start = time.now().ms_timestamp()
    var conn = udp.connect('127.0.0.1:8088')
    var msg = 'hello\n' as [u8]

    for int i = 0; i < 100000; i += 1 {
        conn.write(msg)
    }

    conn.close()
    var end = time.now().ms_timestamp()
    println('use ms:', end - start)
    assert(end - start < 1000)
}